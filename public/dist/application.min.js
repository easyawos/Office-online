"use strict";var ApplicationConfiguration=function(){var applicationModuleName="Online Office",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("answers"),ApplicationConfiguration.registerModule("blogs"),ApplicationConfiguration.registerModule("comments"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("projects"),ApplicationConfiguration.registerModule("users"),angular.module("answers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAnswers",{url:"/answers",templateUrl:"modules/answers/views/list-answers.client.view.html"}).state("createAnswer",{url:"/answers/create",templateUrl:"modules/answers/views/create-answer.client.view.html"}).state("viewAnswer",{url:"/answers/:answerId",templateUrl:"modules/answers/views/view-answer.client.view.html"}).state("editAnswer",{url:"/answers/:answerId/edit",templateUrl:"modules/answers/views/edit-answer.client.view.html"})}]),angular.module("answers").controller("AnswersController",["$scope","$stateParams","$location","Authentication","Answers",function($scope,$stateParams,$location,Authentication,Answers){$scope.authentication=Authentication,$scope.create=function(){var answer=new Answers({answer:this.answer});answer.$save(function(response){$location.path("answers/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(answer){if(answer){answer.$remove();for(var i in $scope.answers)$scope.answers[i]===answer&&$scope.answers.splice(i,1)}else $scope.answer.$remove(function(){$location.path("answers")})},$scope.update=function(){var answer=$scope.answer;answer.$update(function(){$location.path("answers/"+answer._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.answers=Answers.query()},$scope.findOne=function(){$scope.answer=Answers.get({answerId:$stateParams.answerId})}}]),angular.module("answers").factory("Answers",["$resource",function($resource){return $resource("projects/:projectId/answers/:answerId",{projectId:"@project",answerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("blogs").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Discussions","blogs","dropdown","/blogs(/create)?"),Menus.addSubMenuItem("topbar","blogs","List discussions","blogs"),Menus.addSubMenuItem("topbar","blogs","New discussion","blogs/create")}]),angular.module("blogs").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBlogs",{url:"/blogs",templateUrl:"modules/blogs/views/list-blogs.client.view.html"}).state("createBlog",{url:"/blogs/create",templateUrl:"modules/blogs/views/create-blog.client.view.html"}).state("viewBlog",{url:"/blogs/:blogId",templateUrl:"modules/blogs/views/view-blog.client.view.html"}).state("editBlog",{url:"/blogs/:blogId/edit",templateUrl:"modules/blogs/views/edit-blog.client.view.html"})}]),angular.module("blogs").controller("BlogsController",["$scope","$http","$stateParams","$location","Authentication","Api",function($scope,$http,$stateParams,$location,Authentication,Api){$scope.authentication=Authentication,$scope.addComments=function(){$scope.commentForm=!0},$scope.create=function(){var blog=new Api.Blogs({title:this.title,content:this.content});blog.$save(function(response){$location.path("blogs/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createComment=function(){$scope.commentForm=!1;var comment=new Api.Comments({comment:this.comment,blog:$stateParams.blogId});comment.$save(function(){var blogId=$stateParams.blogId;$location.path("blogs/"+blogId),$scope.comment="",$scope.findOne()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(blog){if(blog){blog.$remove();for(var i in $scope.blogs)$scope.blogs[i]===blog&&$scope.blogs.splice(i,1)}else $scope.blog.$remove(function(){$location.path("blogs")})},$scope.update=function(){var blog=$scope.blog;blog.$update(function(){$location.path("blogs/"+blog._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.blogs=Api.Blogs.query()},$scope.findRecent=function(){$scope.blogs=Api.Blogs.query({count:5})},$scope.findOne=function(){$scope.commentForm=!1,$scope.blog=Api.Blogs.get({blogId:$stateParams.blogId}),$scope.blogComments=Api.Comments.query({blogId:$stateParams.blogId})}}]),angular.module("blogs").factory("Api",["$resource",function($resource){return{Blogs:$resource("blogs/:blogId",{blogId:"@_id"},{update:{method:"PUT"}}),Comments:$resource("/blogs/:blogId/comments",{blogId:"@blog"},{update:{method:"PUT"}})}}]),angular.module("comments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listComments",{url:"/comments",templateUrl:"modules/comments/views/list-comments.client.view.html"}).state("createComment",{url:"/comments/create",templateUrl:"modules/comments/views/create-comment.client.view.html"}).state("viewComment",{url:"/comments/:commentId",templateUrl:"modules/comments/views/view-comment.client.view.html"}).state("editComment",{url:"/comments/:commentId/edit",templateUrl:"modules/comments/views/edit-comment.client.view.html"})}]),angular.module("comments").controller("CommentsController",["$scope","$stateParams","$location","Authentication","Comments",function($scope,$stateParams,$location,Authentication,Comments){$scope.authentication=Authentication,$scope.create=function(){var comment=new Comments({comment:this.comment});comment.$save(function(response){$location.path("comments/"+response._id),$scope.comment=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(comment){if(comment){comment.$remove();for(var i in $scope.comments)$scope.comments[i]===comment&&$scope.comments.splice(i,1)}else $scope.comment.$remove(function(){$location.path("comments")})},$scope.update=function(){var comment=$scope.comment;comment.$update(function(){$location.path("comments/"+comment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.comments=Comments.query()},$scope.findOne=function(){$scope.comment=Comments.get({commentId:$stateParams.commentId})}}]),angular.module("comments").factory("Comments",["$resource",function($resource){return $resource("blogs/:blogId/comments/:commentId",{commentId:"@_id",blogId:"@blog"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("userhome",{url:"/userhome",templateUrl:"modules/core/views/userhome.client.view.html"}).state("adminhome",{url:"/adminhome",templateUrl:"modules/core/views/adminhome.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("projects").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Projects","projects","dropdown","/projects(/create)?"),Menus.addSubMenuItem("topbar","projects","List Projects","projects"),Menus.addSubMenuItem("topbar","projects","New Project","projects/create")}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProjects",{url:"/projects",templateUrl:"modules/projects/views/list-projects.client.view.html"}).state("createProject",{url:"/projects/create",templateUrl:"modules/projects/views/create-project.client.view.html"}).state("viewProject",{url:"/projects/:projectId",templateUrl:"modules/projects/views/view-project.client.view.html"}).state("editProject",{url:"/projects/:projectId/edit",templateUrl:"modules/projects/views/edit-project.client.view.html"})}]),angular.module("projects").controller("ProjectsController",["$scope","$stateParams","$location","$upload","$timeout","Authentication","Projects","Answers",function($scope,$stateParams,$location,$upload,$timeout,Authentication,Projects,Answers){$scope.authentication=Authentication,$scope.onFileSelect=function($files){$scope.uploadedFile=[],$scope.answerUrl=[],$scope.selectedFiles=$files;for(var i=0;i<$files.length;i++){{$files[i]}$scope.start(i)}},$scope.start=function(indexOftheFile){alert("Uploading file, please wait");var formData={key:$scope.selectedFiles[indexOftheFile].name,AWSAccessKeyId:"AKIAJQYBMDUWZVLR6ZGA",acl:"private",policy:"ewogICJleHBpcmF0aW9uIjogIjIwMjAtMDEtMDFUMDA6MDA6MDBaIiwKICAiY29uZGl0aW9ucyI6IFsKICAgIHsiYnVja2V0IjogImtvbWljYnVja2V0In0sCiAgICBbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAiIl0sCiAgICB7ImFjbCI6ICJwcml2YXRlIn0sCiAgICBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAiIl0sCiAgICBbInN0YXJ0cy13aXRoIiwgIiRmaWxlbmFtZSIsICIiXSwKICAgIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCA1MjQyODgwMDBdCiAgXQp9",signature:"CNs+4S/Ms5sCgbITIksXcyHBgas=",filename:$scope.selectedFiles[indexOftheFile].name,"Content-Type":$scope.selectedFiles[indexOftheFile].type};$scope.uploadedFile[indexOftheFile]=$upload.upload({url:"https://komicbucket.s3-us-west-2.amazonaws.com/",method:"POST",headers:{"Content-Type":$scope.selectedFiles[indexOftheFile].type},data:formData,file:$scope.selectedFiles[indexOftheFile]}),$scope.uploadedFile[indexOftheFile].then(function(){$timeout(function(){var ansUrl="https://komicbucket.s3-us-west-2.amazonaws.com/"+$scope.selectedFiles[indexOftheFile].name;$scope.answerUrl.push(ansUrl),$scope.createAnswer($scope.answerUrl)})},function(){},function(){}),$scope.uploadedFile[indexOftheFile].xhr(function(){})},$scope.createAnswer=function(ANS){var answer=new Answers({answer:ANS});answer.$save({projectId:$stateParams.projectId},function(){var projectId=$stateParams.projectId;$location.path("projects/"+projectId),$scope.findOne()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.create=function(){var project=new Projects({title:this.title,content:this.content});project.answer=$scope.files,project.$save(function(response){$location.path("projects/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(project){if(project){project.$remove();for(var i in $scope.projects)$scope.projects[i]===project&&$scope.projects.splice(i,1)}else $scope.project.$remove(function(){$location.path("projects")})},$scope.update=function(){var project=$scope.project;project.$update(function(){$location.path("projects/"+project._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.projects=Projects.query()},$scope.findOne=function(){$scope.project=Projects.get({projectId:$stateParams.projectId}),$scope.projectAnswers=Answers.query({projectId:$stateParams.projectId})}}]),angular.module("projects").factory("Projects",["$resource",function($resource){return $resource("projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"}})}]).factory("Answers",["$resource",function($resource){return $resource("projects/:projectId/answers",{projectId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Users","users","dropdown"),Menus.addSubMenuItem("topbar","users","List Users","users"),Menus.addSubMenuItem("topbar","users","New User","signup")}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("NewUser",{url:"/users/create",templateUrl:"modules/users/views/create-users.client.view.html"}).state("listUsers",{url:"/users",templateUrl:"modules/users/views/list-users.client.view.html"}).state("viewUser",{url:"/users/:userId",templateUrl:"modules/users/views/view-user.client.view.html"}).state("editUser",{url:"/users/:userId/edit",templateUrl:"modules/users/views/edit-user.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(){$scope.credentials="",alert("User Successfully Created")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("user"===$scope.authentication.user.roles[0]?"/userhome":"/adminhome")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("UsersController",["$scope","$http","$stateParams","$location","Authentication","Users",function($scope,$http,$stateParams,$location,Authentication,Users){$scope.authentication=Authentication,$scope.find=function(){$scope.users=Users.query()},$scope.findOne=function(){$scope.user=Users.get({userId:$stateParams.userId},function(){$scope.user.isAdmin=0===$scope.user.roles.indexOf("admin")})},$scope.remove=function(user){if(user){user.$remove();for(var i in $scope.users)$scope.users[i]===user&&$scope.users.splice(i,1)}else $scope.user.$remove(function(){$location.path("users")})},$scope.update=function(){var user=$scope.user;user.$update(function(){$location.path("users/"+user._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);